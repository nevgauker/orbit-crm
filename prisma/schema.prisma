// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") // Ensure DATABASE_URL points to your MongoDB instance
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  contacts  Contact[]
  leads     Lead[]
  tasks     Task[]

  Opportunity Opportunity[]

  Email Email[]

  Report Report[]
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String
  phone     String?
  company   String?
  ownerId   String   @db.ObjectId
  owner     User     @relation(fields: [ownerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lead {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  email         String
  phone         String?
  status        LeadStatus
  ownerId       String        @db.ObjectId
  owner         User          @relation(fields: [ownerId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  opportunities Opportunity[]
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  LOST
}

model Opportunity {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  value       Int
  status      OpportunityStatus
  leadId      String            @db.ObjectId
  lead        Lead              @relation(fields: [leadId], references: [id])
  ownerId     String            @db.ObjectId
  owner       User              @relation(fields: [ownerId], references: [id])
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

enum OpportunityStatus {
  OPEN
  IN_PROGRESS
  WON
  LOST
}

model Task {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  dueDate     DateTime?
  status      TaskStatus
  ownerId     String     @db.ObjectId
  owner       User       @relation(fields: [ownerId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum TaskStatus {
  PENDING
  COMPLETED
  OVERDUE
}

model Email {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  sender     String
  recipient  String
  subject    String
  body       String
  isRead     Boolean  @default(false)
  receivedAt DateTime
  ownerId    String   @db.ObjectId
  owner      User     @relation(fields: [ownerId], references: [id])
  createdAt  DateTime @default(now())
}

model Report {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  data        Json
  ownerId     String   @db.ObjectId
  owner       User     @relation(fields: [ownerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
